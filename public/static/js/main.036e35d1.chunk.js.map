{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["download","filename","text","element","document","createElement","setAttribute","encodeURIComponent","style","display","body","appendChild","click","removeChild","getAccessString","localStorage","getItem","getUrl","route","apigw","split","fetchApi","extraBody","a","async","url","auth","options","method","JSON","stringify","fetch","then","r","json","response","data","App","rulesUploadRef","useRef","useState","loadingText","setLoadingText","toastText","setToastText","toastTimeout","setToastTimeout","accessStringInput","setAccessStringInput","validAccessString","setValidAccessString","toast","clearTimeout","timeoutId","setTimeout","errorHandler","fn","verifyAccessString","access_string","setItem","useEffect","showModal","className","class","type","onChange","e","target","value","onClick","transactions","ref","file","current","files","Promise","resolve","reject","reader","FileReader","readAsText","onload","result","onerror","contents","rules","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.036e35d1.chunk.js","sourcesContent":["import React, { useEffect, useState, useRef } from 'react'\nimport './App.css'\n\nconst download = (filename, text) => {\n  const element = document.createElement('a')\n  element.setAttribute(\n    'href',\n    'data:text/plain;charset=utf-8,' + encodeURIComponent(text)\n  )\n  element.setAttribute('download', filename)\n\n  element.style.display = 'none'\n  document.body.appendChild(element)\n\n  element.click()\n\n  document.body.removeChild(element)\n}\n\nconst getAccessString = () => {\n  return localStorage.getItem('access_string')\n}\n\nconst putAccessString = access_string => {\n  localStorage.setItem('access_string', access_string)\n}\n\nconst getApigw = () => getAccessString().split('.')[0]\n\nconst getUrl = route => {\n  const apigw = getApigw()\n  return `https://${apigw}.execute-api.us-east-1.amazonaws.com/Prod/base?route=${route}`\n}\n\nconst getAuthToken = () => getAccessString().split('.')[1]\n\nconst fetchApi = async (route, extraBody) => {\n  const url = getUrl(route)\n  let body = {\n    auth: getAuthToken(),\n  }\n  if (extraBody) {\n    body = {\n      ...body,\n      ...extraBody,\n    }\n  }\n  const options = {\n    method: 'post',\n    body: JSON.stringify(body),\n  }\n  const response = await fetch(url, options).then(r => r.json())\n  return response.data\n}\n\nfunction App() {\n  const rulesUploadRef = useRef(null)\n  const [loadingText, setLoadingText] = useState('')\n  const [toastText, setToastText] = useState('')\n  const [toastTimeout, setToastTimeout] = useState(null)\n  const [accessStringInput, setAccessStringInput] = useState('')\n  const [validAccessString, setValidAccessString] = useState(true)\n\n  const toast = text => {\n    if (toastTimeout) {\n      clearTimeout(toastTimeout)\n    }\n    setToastText(text)\n    const timeoutId = setTimeout(() => {\n      clearTimeout(toastTimeout)\n      setToastTimeout(null)\n      setToastText('')\n    }, 10000)\n    setToastTimeout(timeoutId)\n  }\n\n  const errorHandler = async fn => {\n    try {\n      await fn()\n    } catch (e) {\n      toast('Error occurred')\n      setLoadingText('')\n      throw e\n    }\n  }\n\n  const uploadRules = async () => {\n    errorHandler(async () => {\n      const file = rulesUploadRef.current.files[0]\n\n      const contents = await new Promise((resolve, reject) => {\n        const reader = new FileReader()\n        reader.readAsText(file, 'UTF-8')\n        reader.onload = e => resolve(e.target.result)\n        reader.onerror = e => reject(e)\n      })\n\n      setLoadingText('Uploading Rules')\n      await fetchApi('rules_put', { rules: contents })\n      setLoadingText('')\n      toast('Uploading Rules Successful!')\n    })\n  }\n\n  const downloadTransactions = async () => {\n    errorHandler(async () => {\n      setLoadingText('Downloading Transactions')\n      const transactions = await fetchApi('transactions_get')\n      setLoadingText('')\n      download('transactions.csv', transactions)\n    })\n  }\n\n  const downloadRules = async () => {\n    errorHandler(async () => {\n      setLoadingText('Downloading Rules')\n      const transactions = await fetchApi('rules_get')\n      setLoadingText('')\n      download('classification_rules.csv', transactions)\n    })\n  }\n\n  const classify = async () => {\n    errorHandler(async () => {\n      setLoadingText('Classifying')\n      await fetchApi('classify')\n      setLoadingText('')\n      toast('Classification Successful!')\n    })\n  }\n\n  const verifyAccessString = () => {\n    if (accessStringInput) {\n      putAccessString(accessStringInput)\n      setValidAccessString(true)\n    }\n  }\n\n  useEffect(() => {\n    const localStorageAccessString = getAccessString()\n    if (!localStorageAccessString) {\n      setValidAccessString(false)\n    }\n  }, [])\n\n  const showModal = !!loadingText || !validAccessString\n\n  return (\n    <div className=\"finance-viewer\">\n      {showModal ? (\n        <div className=\"modal\">\n          <div className=\"modal-body\">\n            <div className=\"loader-container\">\n              <div>{loadingText}</div>\n              <div class=\"lds-hourglass\"></div>\n            </div>\n            {!validAccessString ? (\n              <section>\n                <section>Please provide access string</section>\n                <section>\n                  <input\n                    type=\"text\"\n                    onChange={e => setAccessStringInput(e.target.value)}\n                  />\n                  <button onClick={() => verifyAccessString()}>Go</button>\n                </section>\n              </section>\n            ) : null}\n          </div>\n        </div>\n      ) : null}\n      {toastText ? <div className=\"toast\">{toastText}</div> : null}\n      <header>\n        <button onClick={() => setValidAccessString(false)}>\n          Set Access String\n        </button>\n      </header>\n      <section className=\"main-body\">\n        <nav className=\"side-nav\"></nav>\n        <section className=\"main\">\n          <section>\n            <p>\n              Click to download all transactions as a csv which includes their\n              classifications\n            </p>\n            <button onClick={() => downloadTransactions()}>\n              Download Transactions\n            </button>\n          </section>\n          <section>\n            <p>Click to download all classification rules as a csv</p>\n            <button onClick={() => downloadRules()}>Download Rules</button>\n          </section>\n          <section>\n            <p>You can upload an updated rules file</p>\n            <input type=\"file\" ref={rulesUploadRef} />\n            <button onClick={() => uploadRules()}>Upload Rules</button>\n          </section>\n          <section>\n            <p>\n              After updating the rules file, click this to classify all\n              transactions again. You can then download transactions above to\n              get all transactions with their updated classifications\n            </p>\n            <button onClick={() => classify()}>Classify Transactions</button>\n          </section>\n        </section>\n      </section>\n      <footer></footer>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}