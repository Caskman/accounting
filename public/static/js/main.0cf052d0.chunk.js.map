{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["download","filename","text","element","document","createElement","setAttribute","encodeURIComponent","style","display","body","appendChild","click","removeChild","getAccessString","localStorage","getItem","getUrl","route","apigw","fetchApi","options","a","async","url","fetch","method","then","r","json","response","data","App","rulesUploadRef","useRef","useState","loadingText","setLoadingText","toastText","setToastText","toastTimeout","setToastTimeout","accessStringInput","setAccessStringInput","validAccessString","setValidAccessString","toast","clearTimeout","timeoutId","setTimeout","errorHandler","fn","verifyAccessString","access_string","setItem","useEffect","showModal","className","type","onChange","e","target","value","onClick","transactions","ref","file","current","files","Promise","resolve","reject","reader","FileReader","readAsText","onload","result","onerror","contents","JSON","stringify","rules","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0cf052d0.chunk.js","sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\nimport \"./App.css\";\n\nconst download = (filename, text) => {\n  const element = document.createElement(\"a\");\n  element.setAttribute(\n    \"href\",\n    \"data:text/plain;charset=utf-8,\" + encodeURIComponent(text)\n  );\n  element.setAttribute(\"download\", filename);\n\n  element.style.display = \"none\";\n  document.body.appendChild(element);\n\n  element.click();\n\n  document.body.removeChild(element);\n};\n\nconst getAccessString = () => {\n  return localStorage.getItem(\"access_string\");\n};\n\nconst putAccessString = access_string => {\n  localStorage.setItem(\"access_string\", access_string);\n};\n\nconst getApigw = () => getAccessString();\n\nconst getUrl = route => {\n  const apigw = getApigw();\n  return `https://${apigw}.execute-api.us-east-1.amazonaws.com/Prod/base?route=${route}`;\n};\n\nconst fetchApi = async (route, options) => {\n  const url = getUrl(route);\n  const response = await fetch(url, {\n    method: \"post\",\n    ...options\n  }).then(r => r.json());\n  return response.data;\n};\n\nfunction App() {\n  const rulesUploadRef = useRef(null);\n  const [loadingText, setLoadingText] = useState(\"\");\n  const [toastText, setToastText] = useState(\"\");\n  const [toastTimeout, setToastTimeout] = useState(null);\n  const [accessStringInput, setAccessStringInput] = useState(\"\");\n  const [validAccessString, setValidAccessString] = useState(true);\n\n  const toast = text => {\n    if (toastTimeout) {\n      clearTimeout(toastTimeout);\n    }\n    setToastText(text);\n    const timeoutId = setTimeout(() => {\n      clearTimeout(toastTimeout);\n      setToastTimeout(null);\n      setToastText(\"\");\n    }, 10000);\n    setToastTimeout(timeoutId);\n  };\n\n  const errorHandler = async fn => {\n    try {\n      await fn();\n    } catch (e) {\n      toast(\"Error occurred\");\n      setLoadingText(\"\");\n      throw e;\n    }\n  };\n\n  const uploadRules = async () => {\n    errorHandler(async () => {\n      const file = rulesUploadRef.current.files[0];\n\n      const contents = await new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.readAsText(file, \"UTF-8\");\n        reader.onload = e => resolve(e.target.result);\n        reader.onerror = e => reject(e);\n      });\n\n      setLoadingText(\"Uploading Rules\");\n      await fetchApi(\"rules_put\", {\n        body: JSON.stringify({ rules: contents })\n      });\n      setLoadingText(\"\");\n      toast(\"Uploading Rules Successful!\");\n    });\n  };\n\n  const downloadTransactions = async () => {\n    errorHandler(async () => {\n      setLoadingText(\"Downloading Transactions\");\n      const transactions = await fetchApi(\"transactions_get\");\n      setLoadingText(\"\");\n      download(\"transactions.csv\", transactions);\n    });\n  };\n\n  const downloadRules = async () => {\n    errorHandler(async () => {\n      setLoadingText(\"Downloading Rules\");\n      const transactions = await fetchApi(\"rules_get\");\n      setLoadingText(\"\");\n      download(\"classification_rules.csv\", transactions);\n    });\n  };\n\n  const classify = async () => {\n    errorHandler(async () => {\n      setLoadingText(\"Classifying\");\n      await fetchApi(\"classify\");\n      setLoadingText(\"\");\n      toast(\"Classification Successful!\");\n    });\n  };\n\n  const verifyAccessString = () => {\n    if (accessStringInput) {\n      putAccessString(accessStringInput);\n      setValidAccessString(true);\n    }\n  };\n\n  useEffect(() => {\n    const localStorageAccessString = getAccessString();\n    if (!localStorageAccessString) {\n      setValidAccessString(false);\n    }\n  }, []);\n\n  const showModal = !!loadingText || !validAccessString;\n\n  return (\n    <div className=\"finance-viewer\">\n      {showModal ? (\n        <div className=\"modal\">\n          <div className=\"modal-body\">\n            {loadingText}\n            {!validAccessString ? (\n              <section>\n                <section>Please provide access string</section>\n                <section>\n                  <input\n                    type=\"text\"\n                    onChange={e => setAccessStringInput(e.target.value)}\n                  />\n                  <button onClick={() => verifyAccessString()}>Go</button>\n                </section>\n              </section>\n            ) : null}\n          </div>\n        </div>\n      ) : null}\n      {toastText ? <div className=\"toast\">{toastText}</div> : null}\n      <header>\n        <button onClick={() => setValidAccessString(false)}>\n          Set Access String\n        </button>\n      </header>\n      <section className=\"main-body\">\n        <nav className=\"side-nav\"></nav>\n        <section className=\"main\">\n          <section>\n            <p>\n              Click to download all transactions as a csv which includes their\n              classifications\n            </p>\n            <button onClick={() => downloadTransactions()}>\n              Download Transactions\n            </button>\n          </section>\n          <section>\n            <p>Click to download all classification rules as a csv</p>\n            <button onClick={() => downloadRules()}>Download Rules</button>\n          </section>\n          <section>\n            <p>You can upload an updated rules file</p>\n            <input type=\"file\" ref={rulesUploadRef} />\n            <button onClick={() => uploadRules()}>Upload Rules</button>\n          </section>\n          <section>\n            <p>\n              After updating the rules file, click this to classify all\n              transactions again. You can then download transactions above to\n              get all transactions with their updated classifications\n            </p>\n            <button onClick={() => classify()}>Classify Transactions</button>\n          </section>\n        </section>\n      </section>\n      <footer></footer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}